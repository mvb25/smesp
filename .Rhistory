# Get the overall mean plus the mean of the residuals (difference between
# group mean and observed values).
model_stats <- df %>%
group_by(x_obs) %>%
# the residuals are calculated as the difference between observed y and
# the group mean of the observed Y
mutate(residual  = y_obs - mean(y_obs)) %>%
# the following two lines mean that we calculate a single sd of the errors
# (observed - mean), i.e., we assume the same error term across groups. That
# might not be true (it is not true for the example data!). If you want to
# use the observed difference in error term, use 'heterosc_cat', based on
# values calculated prior to using this function.
ungroup() %>%
mutate(sd_resid = sd(residual)) %>%
summarise(mean_y_obs = mean(y_obs),
sd_resid = mean(sd_resid)) %>%
# multiply the error term with user-provided factor
bind_cols(model_stats, .)
# Define the size of the sample
if(length(sample_size) == 1){
if(sample_size == "as_data"){
nr_samples <- df %>% group_by(x_obs) %>% summarise(nr = n())
} else {
nr_samples <- data.frame(nr = c(sample_size, sample_size))
}
} else if(length(sample_size) == 2){
nr_samples <- data.frame(nr = sample_size)
}
library(smesp)
specify_model(test="difference between means",
procedure = "confidence interval",
cat_var = "top_pos",
cont_var_1  = NULL,
error_cat  = c(1, 1)) %>%
run_simulation(reps = 1000, sample_size = c(10, 100)) %>%
plot_distribution()
specify_model(test="difference between means",
procedure = "confidence interval",
cat_var = "top_pos",
cont_var_1  = NULL,
error_cat  = c(1, 5)) %>%
run_simulation(reps = 1000, sample_size = c(10, 100)) %>%
plot_distribution()
specify_model(test="difference between means",
procedure = "confidence interval",
cat_var = "top_pos",
cont_var_1  = NULL,
error_cat  = c(1, 50)) %>%
run_simulation(reps = 1000, sample_size = c(10, 100)) %>%
plot_distribution()
specify_model(test="difference between means",
procedure = "confidence interval",
cat_var = "top_pos",
cont_var_1  = NULL,
error_cat  = c(1, 50)) %>%
run_simulation(reps = 5000, sample_size = c(10, 100)) %>%
plot_distribution()
specify_model(test="difference between means",
procedure = "confidence interval",
cat_var = "top_pos",
cont_var_1  = NULL,
error_cat  = c(0.2, 4)) %>%
run_simulation(reps = 5000, sample_size = c(10, 100)) %>%
plot_distribution()
pollen <- read.csv("phyloflash_plants-pollen_data.csv")
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv")
View(pollen)
library(tidyverse)
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv") %>%
pivot_longer(names_to = sample_id, values_to = abundance)
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv") %>%
pivot_longer(cols = 4:64, names_to = sample_id, values_to = abundance)
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv") %>%
pivot_longer(cols = 4:64, names_to = "sample_id", values_to = "abundance")
View(pollen)
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv") %>%
pivot_longer(cols = 4:64, names_to = "sample_id", values_to = "abundance") %>%
filter(abundance != 0)
pollen <- read.csv("data/phyloflash_plants-pollen_additional.csv") %>%
left_join(pollen, ., by = c("sample_id", "sample_id"))
View(pollen)
pollen <- read.csv("data/phyloflash_plants-pollen_additional.csv") %>%
left_join(pollen, .)
View(pollen)
pollen <- read.csv("data/phyloflash_plants-pollen_data.csv") %>%
pivot_longer(cols = 4:64, names_to = "sample_id", values_to = "abundance") %>%
filter(abundance != 0)
pollen <- read.csv("data/phyloflash_plants-pollen_additional.csv") %>%
left_join(pollen)
write.csv(pollen, "data/pollen_data.csv", row.names = F)
View(pollen)
library(smesp)
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
library(devtools)
install_github("mvb/smesp")
install_github("mvb25/smesp")
specify_model() %>% visualise_simulation()
specify_model() %>% visualise_simulation()
install_github("mvb25/smesp")
install.packages(c("ade4", "backports", "bayestestR", "BiodiversityR", "blogdown", "broom", "cli", "colorspace", "cowplot", "cpp11", "data.table", "dbplyr", "digest", "DT", "entropart", "fda", "fitdistrplus", "future", "generics", "GGally", "ggeffects", "ggplot2", "ggrepel", "ggridges", "gh", "git2r", "globals", "here", "Hmisc", "htmlwidgets", "insight", "isoband", "janitor", "jsonlite", "lme4", "lubridate", "magrittr", "moderndive", "multcomp", "openxlsx", "patchwork", "pbkrtest", "performance", "pillar", "processx", "quantreg", "R6", "raster", "RcppArmadillo", "RcppEigen", "renv", "rgl", "rlang", "rmarkdown", "rsq", "servr", "sp", "testthat", "tinytex", "treemapify", "usethis", "vctrs", "vegan", "VGAM", "xfun"))
remove.packages(smesp)
remove.packages("smesp")
specify_model()
install_github("mvb25/smesp")
library(devtools)
install_github("mvb25/smesp")
specify_model() %>% visualise_simulation()
library(tidyverse)
specify_model() %>% visualise_simulation()
library(smesp)
specify_model() %>% visualise_simulation()
help(package = smesp)
?smesp
help(package = smesp)
?summarise
?specify_model
packageDescription("smesp")
library(smesp)
library(smesp)
library(smesp)
library(smesp)
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% visualise_simulation()
specify_model(test = "diff intercepts", procedure = "H0") %>% run_simulation(reps=10)
a<-specify_model(test = "diff intercepts", procedure = "H0") %>% run_simulation(reps=10)
View(a)
library(smesp)
a<-specify_model(test = "diff intercepts", procedure = "H0") %>% run_simulation(reps=10)
View(a)
df<-specify_model(test = "diff intercepts", procedure = "H0")
# original data
df <- df %>%
rename(x_cont   = attributes(.)$continuous_predictor,
x_cat    = attributes(.)$categorical_predictor,
y_obs    = attributes(.)$response_variable) %>%
mutate(y_pred   = predict(lm(y_obs ~ x_cont + x_cat, data = .)),
orig_res = y_pred-y_obs)
# Calculate the difference between group sds of residuals and that of the
# overall mean
overall_sd_resid <- sd(df$orig_res)
group_sds <- df %>%
group_by(x_cat) %>%
summarise(sd_resid = sd(orig_res)) %>%
mutate(mf_grp = sd_resid/overall_sd_resid)
library(tidyverse)
# original data
df <- df %>%
rename(x_cont   = attributes(.)$continuous_predictor,
x_cat    = attributes(.)$categorical_predictor,
y_obs    = attributes(.)$response_variable) %>%
mutate(y_pred   = predict(lm(y_obs ~ x_cont + x_cat, data = .)),
orig_res = y_pred-y_obs)
# Calculate the difference between group sds of residuals and that of the
# overall mean
overall_sd_resid <- sd(df$orig_res)
group_sds <- df %>%
group_by(x_cat) %>%
summarise(sd_resid = sd(orig_res)) %>%
mutate(mf_grp = sd_resid/overall_sd_resid)
# Define the multiplication factors to calculate for each group how much more
# the error term is than the observed overall sd of the residuals
if(length(attributes(df)$error_cat) == 1){
if(attributes(df)$error_cat == "as data"){
mf <- c(group_sds$mf_grp[1], group_sds$mf_grp[2])
} else {
print("error_cat has to be a vector with 2 values, or 'as data'")
}
} else {mf <- c(attributes(df)$error_cat)}
# groups
group_data <- df %>% mutate(overall_sd = sd(orig_res)) %>%
group_by(x_cat) %>%
summarise(nr_original = n(),
overall_sd = mean(overall_sd)) %>%
ungroup() %>%
# calculates the error terms for the two groups by multiplying mf with the
# overall sd of the residuals
mutate(grp_mf = mf,
grp_err = grp_mf*overall_sd) %>%
# Getting proportion of observations (data points) per group
mutate(prop_obs = nr_original / sum(nr_original)) %>%
# define number of observations (= # of data points) per group
# Use ifelse because with case_when all RHSs must evaluate to the same type of vector.
# and when sample_size = "as data", that is not possible
mutate(nr_new = ifelse(sample_size == "as data", nr_original, prop_obs*sample_size))
simdat = list()
for(i in 1:reps){
if(xdistr == "uniform"){
# Categorical variable, level 1
grp1_range <- df %>%
filter(x_cat == group_data$x_cat[1]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp1 <- data.frame(x_cont = seq(grp1_range$min, grp1_range$max,
length.out = max(1024, group_data$nr_new[1])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
grp2_range <- df %>%
filter(x_cat == group_data$x_cat[2]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp2 <- data.frame(x_cont = seq(grp2_range$min, grp2_range$max,
length.out = max(1024, group_data$nr_new[2])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
} else if(xdistr == "as data") {
# Categorical variable, level 1
# figure out how to use map() here!
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[1])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[1]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp1 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[2])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[2]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp2 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
}
# When null hypothesis: regression statistics of the model fitted on original
# data with categorical variable but no interaction (i.e., no difference in intercept)
if(attributes(df)$procedure == "H0"){
lm.tmp <- lm(y_obs ~ x_cont, data = df)
} else {
# When confidence interval: regression statistics of the model fitted on
# original data with the categorical variable
lm.tmp  <- lm(y_obs ~ x_cat*x_cont, data = df)}
simdat[[i]] <- xy_data %>%
mutate(y_pop =  predict(lm.tmp, newdata = xy_data)) %>%
rowwise() %>%
mutate(sim_y = y_pop + rnorm(1, 0, sdx)) %>%
ungroup() %>%
select(x_cont, x_cat, sim_y)
}
reps=10
sample_size = "as data"
# original data
df <- df %>%
rename(x_cont   = attributes(.)$continuous_predictor,
x_cat    = attributes(.)$categorical_predictor,
y_obs    = attributes(.)$response_variable) %>%
mutate(y_pred   = predict(lm(y_obs ~ x_cont + x_cat, data = .)),
orig_res = y_pred-y_obs)
df<-specify_model(test = "diff intercepts", procedure = "H0")
df <- df %>%
rename(x_cont   = attributes(.)$continuous_predictor,
x_cat    = attributes(.)$categorical_predictor,
y_obs    = attributes(.)$response_variable) %>%
mutate(y_pred   = predict(lm(y_obs ~ x_cont + x_cat, data = .)),
orig_res = y_pred-y_obs)
# Calculate the difference between group sds of residuals and that of the
# overall mean
overall_sd_resid <- sd(df$orig_res)
group_sds <- df %>%
group_by(x_cat) %>%
summarise(sd_resid = sd(orig_res)) %>%
mutate(mf_grp = sd_resid/overall_sd_resid)
# Define the multiplication factors to calculate for each group how much more
# the error term is than the observed overall sd of the residuals
if(length(attributes(df)$error_cat) == 1){
if(attributes(df)$error_cat == "as data"){
mf <- c(group_sds$mf_grp[1], group_sds$mf_grp[2])
} else {
print("error_cat has to be a vector with 2 values, or 'as data'")
}
} else {mf <- c(attributes(df)$error_cat)}
# groups
group_data <- df %>% mutate(overall_sd = sd(orig_res)) %>%
group_by(x_cat) %>%
summarise(nr_original = n(),
overall_sd = mean(overall_sd)) %>%
ungroup() %>%
# calculates the error terms for the two groups by multiplying mf with the
# overall sd of the residuals
mutate(grp_mf = mf,
grp_err = grp_mf*overall_sd) %>%
# Getting proportion of observations (data points) per group
mutate(prop_obs = nr_original / sum(nr_original)) %>%
# define number of observations (= # of data points) per group
# Use ifelse because with case_when all RHSs must evaluate to the same type of vector.
# and when sample_size = "as data", that is not possible
mutate(nr_new = ifelse(sample_size == "as data", nr_original, prop_obs*sample_size))
simdat = list()
for(i in 1:reps){
if(xdistr == "uniform"){
# Categorical variable, level 1
grp1_range <- df %>%
filter(x_cat == group_data$x_cat[1]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp1 <- data.frame(x_cont = seq(grp1_range$min, grp1_range$max,
length.out = max(1024, group_data$nr_new[1])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
grp2_range <- df %>%
filter(x_cat == group_data$x_cat[2]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp2 <- data.frame(x_cont = seq(grp2_range$min, grp2_range$max,
length.out = max(1024, group_data$nr_new[2])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
} else if(xdistr == "as data") {
# Categorical variable, level 1
# figure out how to use map() here!
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[1])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[1]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp1 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[2])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[2]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp2 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
}
# When null hypothesis: regression statistics of the model fitted on original
# data with categorical variable but no interaction (i.e., no difference in intercept)
if(attributes(df)$procedure == "H0"){
lm.tmp <- lm(y_obs ~ x_cont, data = df)
} else {
# When confidence interval: regression statistics of the model fitted on
# original data with the categorical variable
lm.tmp  <- lm(y_obs ~ x_cat*x_cont, data = df)}
simdat[[i]] <- xy_data %>%
mutate(y_pop =  predict(lm.tmp, newdata = xy_data)) %>%
rowwise() %>%
mutate(sim_y = y_pop + rnorm(1, 0, sdx)) %>%
ungroup() %>%
select(x_cont, x_cat, sim_y)
}
xdistr = "as data"
simdat = list()
for(i in 1:reps){
if(xdistr == "uniform"){
# Categorical variable, level 1
grp1_range <- df %>%
filter(x_cat == group_data$x_cat[1]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp1 <- data.frame(x_cont = seq(grp1_range$min, grp1_range$max,
length.out = max(1024, group_data$nr_new[1])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
grp2_range <- df %>%
filter(x_cat == group_data$x_cat[2]) %>%
summarise(min = 0.95*min(x_cont), max = 1.05*max(x_cont))
grp2 <- data.frame(x_cont = seq(grp2_range$min, grp2_range$max,
length.out = max(1024, group_data$nr_new[2])),
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
} else if(xdistr == "as data") {
# Categorical variable, level 1
# figure out how to use map() here!
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[1])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[1]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp1 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[1]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[1]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[1], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[1])
# Categorical variable, level 2
x_dens_distr <- df %>%
filter(x_cat == group_data$x_cat[2])
x_dens_distr = density(x_dens_distr$x_cont,
n = max(1024, group_data$nr_new[2]),
from = 0.95*min(x_dens_distr$x_cont), to = 1.05*max(x_dens_distr$x_cont))
grp2 <- data.frame(x_cont = x_dens_distr$x,
heterosc = seq(1, attributes(df)$het_cont1,
length.out = max(1024, group_data$nr_new[2]))) %>%
mutate(sdx = heterosc * (attributes(df)$error_cont1 * group_data$grp_err[2]) / mean(heterosc)) %>%
slice_sample(n = group_data$nr_new[2], weight_by = x_dens_distr$y, replace=T) %>% select(-heterosc) %>%
mutate(x_cat = group_data$x_cat[2])
# Categorical variable, join two levels
xy_data <- bind_rows(grp1, grp2)
}
# When null hypothesis: regression statistics of the model fitted on original
# data with categorical variable but no interaction (i.e., no difference in intercept)
if(attributes(df)$procedure == "H0"){
lm.tmp <- lm(y_obs ~ x_cont, data = df)
} else {
# When confidence interval: regression statistics of the model fitted on
# original data with the categorical variable
lm.tmp  <- lm(y_obs ~ x_cat*x_cont, data = df)}
simdat[[i]] <- xy_data %>%
mutate(y_pop =  predict(lm.tmp, newdata = xy_data)) %>%
rowwise() %>%
mutate(sim_y = y_pop + rnorm(1, 0, sdx)) %>%
ungroup() %>%
select(x_cont, x_cat, sim_y)
}
View(simdat)
# fitting a regression model on all data frames
simdat <-  simdat %>% map(~ lm(sim_y ~ x_cat + x_cont, data = .))
# Extracting regression statistics
cat_var_levels <- df %>%
distinct(x_cat) %>%
pull(x_cat)
tmp1 <- simdat %>%
map_df(broom::tidy, .id = "id") %>%
rename(replicate = id, p_value= p.value, se = std.error) %>%
mutate(replicate = as.integer(replicate)) %>%
mutate(term = rep(c(str_c("intercept ", cat_var_levels[1]),
"intercept difference",
str_c("slope ", cat_var_levels[1])),
reps)) %>%
na.omit()
View(tmp1)
tmp1 <- simdat %>%
map_df(broom::tidy, .id = "id")
tmp1 <- simdat %>%
map_df(broom::tidy, .id = "id") %>%
rename(replicate = id, p_value= p.value, se = std.error)
tmp1 <- simdat %>%
map_df(broom::tidy, .id = "id") %>%
rename(replicate = id, p_value= p.value, se = std.error) %>%
mutate(replicate = as.integer(replicate))
tmp1 <- simdat %>%
map_df(broom::tidy, .id = "id") %>%
rename(replicate = id, p_value= p.value, se = std.error) %>%
mutate(replicate = as.integer(replicate)) %>%
mutate(term = rep(c(str_c("intercept ", cat_var_levels[1]),
"intercept difference",
str_c("slope")),
reps)) %>%
na.omit()
library(smesp)
library(smesp)
df<-specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(pres= 100) %>% plot_distribution()
df<-specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100) %>% plot_distribution()
specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100) %>% plot_distribution()
specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100)
outputdata <- specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100)
library(smesp)
specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100) %>% plot_distribution()
specify_model(test = "diff intercepts", procedure = "CI")  %>% run_simulation(reps= 100) %>% plot_distribution()
specify_model(test = "diff intercepts", procedure = "H0")  %>% run_simulation(reps= 100) %>% plot_distribution()
