theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot <-  myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = tp.factors),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=env.factors), size = 3)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=tp.factors),
hjust=0, vjust=-0.8, size = 5) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot
myplot <-  myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = tp.factors),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 3)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot <-  myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = tp.factors),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 3)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot
myplot <-  ggplot() +
geom_point(data = plotdata,
aes(x=NMDS1, y=NMDS2, size = AGB, colour = TP),
alpha = 0.7) +
geom_line(data = plotdata,
aes(x=NMDS1, y=NMDS2,
group = transect,
colour = TP)) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot
myplot
# Fit TP, basal area and soil data on the species NMDS
fit <- envfit(succ_nmds, plotdata[,c("TP", "age", "AGB")], choice = c(1:2), perm=999, na.rm=T)
fit
# first we need to extract the coordinates of these vectors in the NMDS.
# We will use again the function `score` for this.
env.scrs <- as.data.frame(scores(fit, display = "vectors")) %>%
rownames_to_column("variable")
TP.scrs  <- cbind(TP.scrs, tp.factors = as.factor(c("LS", "US"))) %>%
rownames_to_column("variable")
TP.scrs  <- as.data.frame(scores(fit, display = "factors")) %>%
rownames_to_column("variable")
myplot <-  myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 3)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot
# first we need to extract the coordinates of these vectors in the NMDS.
# We will use again the function `score` for this.
env.scrs <- as.data.frame(scores(fit, display = "vectors")) %>%
rownames_to_column("variable")
TP.scrs  <- as.data.frame(scores(fit, display = "factors")) %>%
rownames_to_column("variable")
myplot <-  myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = NMDS1, yend = NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = 3*NMDS1, yend = 3*NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x=NMDS1, y=.1+NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = 3*NMDS1, yend = 3*NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x= 3*NMDS1, y=.2+3*NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
myplot <-  ggplot() +
geom_point(data = plotdata,
aes(x=NMDS1, y=NMDS2, size = AGB, colour = TP),
alpha = 0.7) +
geom_line(data = plotdata,
aes(x=NMDS1, y=NMDS2,
group = transect,
colour = TP)) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot
# first we need to extract the coordinates of these vectors in the NMDS.
# We will use again the function `score` for this.
env.scrs <- as.data.frame(scores(fit, display = "vectors")) %>%
rownames_to_column("variable") %>%
filter(variable != "age")
TP.scrs  <- as.data.frame(scores(fit, display = "factors")) %>%
rownames_to_column("variable")
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = 3*NMDS1, yend = 3*NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x= 3*NMDS1, y=.2+3*NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
View(plotdata)
ind   <- read.csv("treedata.csv") %>%
filter(census < 9)
plotdata <- read.csv("plotdata.csv") %>%
filter(transect %in% ind$transect & census %in% ind$census)
write.csv(ind, "treedata.csv", row.names=F)
write.csv(plotdata, "plotdata.csv", row.names=F)
plotdata <- read.csv("plotdata.csv")
ind   <- read.csv("treedata.csv")
# But first some data wrangling
# Let's remove species that occur in less than 5 sites. That helps by getting a
# stable NMDS and avoids a large influence on the results of these rare species
frequent_species <- ind %>%
distinct(transects, specid) %>%
group_by(specid) %>%
summarise(freq = nr) %>%
filter(nr > 4)
# But first some data wrangling
# Let's remove species that occur in less than 5 sites. That helps by getting a
# stable NMDS and avoids a large influence on the results of these rare species
frequent_species <- ind %>%
distinct(transect, specid) %>%
group_by(specid) %>%
summarise(freq = nr) %>%
filter(nr > 4)
# But first some data wrangling
# Let's remove species that occur in less than 5 sites. That helps by getting a
# stable NMDS and avoids a large influence on the results of these rare species
frequent_species <- ind %>%
distinct(transect, specid) %>%
group_by(specid) %>%
summarise(freq = n()) %>%
filter(freq > 4)
# Use this list to filter the frequent species (occuring in >4 transects across all censuses)
ind <- ind %>%
filter(specid %in% frequent_species$specid)
# Use this list to filter the frequent species (occurring in >4 transects across all censuses)
ind <- ind %>%
filter(specid %in% frequent_species$specid)
# Create the transect-by-species matrix
succession <-  ind %>% group_by(transect, census, specid) %>%
summarise(nr = n()) %>% ungroup() %>%
# remove plots that are not included in the dataframe 'plotdata'
filter(transect %in% plotdata$transect) %>%
pivot_wider(names_from = specid, values_from = nr) %>%
mutate_all(funs(replace(., is.na(.), 0)))
View(succession)
succession <-  ind %>% group_by(transect, census, specid) %>%
summarise(nr = n()) %>% ungroup() %>%
# remove plots that are not included in the dataframe 'plotdata'
filter(transect %in% plotdata$transect)
# Create the transect-by-species matrix
succession <-  ind %>% group_by(transect, census, specid) %>%
summarise(nr = n()) %>% ungroup() %>%
# remove plots that are not included in the dataframe 'plotdata'
filter(transect %in% plotdata$transect) %>%
pivot_wider(names_from = specid, values_from = nr) %>%
mutate_all(funs(replace(., is.na(.), 0)))
# Now compute the NMDS on that matrix
succ_nmds <- succession %>%
# because we do not want R to think that transect and census are species
# we remove them from the matrix
select(-transect, -census) %>%
metaMDS(., distance="jaccard", k=3, trymax=50, trace=F)
succ_nmds
stressplot(succ_nmds)
# This automatically plots the first wo axes.
plot(succ_nmds)
plotdata <- plotdata %>%
arrange(transect, census)
plotdata <-  succ_nmds %>%
scores(., choices = c(1:3), display=c("sites")) %>%
# scores() produces a named matrix, not a dataframe (compare in your environment)
# So we first need to convert the output to a dataframe.
data.frame(.) %>%
bind_cols(plotdata, .)
glimpse(plotdata)
myplot <-  ggplot() +
geom_point(data = plotdata,
aes(x=NMDS1, y=NMDS2, size = AGB, colour = TP),
alpha = 0.7) +
geom_line(data = plotdata,
aes(x=NMDS1, y=NMDS2,
group = transect,
colour = TP)) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot
View(plotdata)
# Fit TP, basal area and soil data on the species NMDS
fit <- envfit(succ_nmds, plotdata[,c("TP", "age", "AGB")], choice = c(1:2), perm=999, na.rm=T)
fit
# first we need to extract the coordinates of these vectors in the NMDS.
# We will use again the function `score` for this.
env.scrs <- as.data.frame(scores(fit, display = "vectors")) %>%
rownames_to_column("variable") %>%
filter(variable != "age")
TP.scrs  <- as.data.frame(scores(fit, display = "factors")) %>%
rownames_to_column("variable")
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = 3*NMDS1, yend = 3*NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x= 3*NMDS1, y=.2+3*NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
succ_dist = as.matrix((vegdist(succession, "jaccard")))
View(succ_dist)
succ_dist   <- succession %>%
select(-transect, - census) %>%
as.matrix((vegdist(., "jaccard")))
succ_dist   <- succession %>% select(-transect, - census)
succ_dist <- as.matrix((succ_dist(., "jaccard")))
succ_dist   <- succession %>% select(-transect, - census)
succ_dist <- as.matrix((succ_dist(., "jaccard")))
temp   <- succession %>% select(-transect, - census)
succ_dist <- as.matrix((temp(., "jaccard")))
temp   <- succession %>% select(-transect, - census)
succ_dist <- as.matrix((succession(., "jaccard")))
succ_dist <- as.matrix((vegdist(temp, "jaccard")))
succ_adonis <- adonis(succ_dist ~ TP, succession)
succ_adonis <- adonis(succ_dist ~ TP, succ_dist)
temp1 <- succession %>% select(-transect, - census)
temp2 <- succession %>% select(transect, census)
succ_dist <- as.matrix((vegdist(temp1, "jaccard")))
succ_adonis <- adonis(succ_dist ~ TP, temp2)
temp3 <- plotdata %>% distinct(transect, census, TP)
succ_adonis <- adonis(succ_dist ~ TP, temp3)
adonis(succ_dist ~ TP, temp3)
ind   <- read.csv("treedata.csv")
plotdata <- read.csv("plotdata.csv")
glimpse(ind)
glimpse(plotdata)
freq_spp <- ind %>%
filter(specid %in% temp$specid) %>%
group_by(site, specid) %>%
summarise(nr = n()) %>%
pivot_wider(names_from = specid, values_from = nr) %>%
# When a species doesn't occur in a site, we will get a NA
# The following line of code is to convert all NA to zero
mutate_all(funs(replace(., is.na(.), 0)))
glimpse(freq_spp)
freq_spp <- ind %>%
filter(specid %in% temp$specid)
temp <- ind %>% distinct(site, specid) %>%
group_by(specid) %>% summarise(freq=n()) %>%
slice_max(order_by = freq, n = 3)
temp
freq_spp <- ind %>%
filter(specid %in% temp$specid) %>%
group_by(site, specid) %>%
summarise(nr = n()) %>%
pivot_wider(names_from = specid, values_from = nr) %>%
# When a species doesn't occur in a site, we will get a NA
# The following line of code is to convert all NA to zero
mutate_all(funs(replace(., is.na(.), 0)))
glimpse(freq_spp)
View(freq_spp)
ggplot(freq_spp) +
geom_point(aes(x=davini, y = 0),
color = "#03A4F9",
size = 4,
alpha = 0.5) +
xlab("abundance of davini") +
# The following code removes the y-axis
theme_bw()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y=element_blank(),
panel.grid.minor.y=element_blank(),
panel.grid.major.y=element_blank())
ggplot(freq_spp) +
geom_point(aes(x=davini, y = micoar),
color = "#03A4F9",
size = 4,
alpha = 0.5) +
xlab("abundance of davini") +
ylab("abundance of micoar") +
theme_bw()
# But first some data wrangling
# Let's remove species that occur in less than 5 sites. That helps by getting a
# stable NMDS and avoids a large influence on the results of these rare species
frequent_species <- ind %>%
distinct(transect, specid) %>%
group_by(specid) %>%
summarise(freq = n()) %>%
filter(freq > 4)
# Use this list to filter the frequent species (occurring in >4 transects across all censuses)
ind <- ind %>%
filter(specid %in% frequent_species$specid)
# Create the transect-by-species matrix
succession <-  ind %>% group_by(transect, census, specid) %>%
summarise(nr = n()) %>% ungroup() %>%
# remove plots that are not included in the dataframe 'plotdata'
filter(transect %in% plotdata$transect) %>%
pivot_wider(names_from = specid, values_from = nr) %>%
mutate_all(funs(replace(., is.na(.), 0)))
View(succession)
# Now compute the NMDS on that matrix
succ_nmds <- succession %>%
# because we do not want R to think that transect and census are species
# we remove them from the matrix
select(-transect, -census) %>%
metaMDS(., distance="jaccard", k=3, trymax=50, trace=F)
succ_nmds
succession
plotdata <- plotdata %>%
arrange(transect, census)
try<-  succ_nmds %>%
scores(., choices = c(1:3), display=c("sites")) %>%
# scores() produces a named matrix, not a dataframe (compare in your environment)
# So we first need to convert the output to a dataframe.
data.frame(.)
View(try)
plotdata try<-  succ_nmds %>%
plotdata <-  succ_nmds %>%
scores(., choices = c(1:3), display=c("sites")) %>%
# scores() produces a named matrix, not a dataframe (compare in your environment)
# So we first need to convert the output to a dataframe.
data.frame(.) %>%
bind_cols(plotdata, .)
glimpse(plotdata)
View(plotdata)
myplot <-  ggplot() +
geom_point(data = plotdata,
aes(x=NMDS1, y=NMDS2, size = AGB, colour = TP),
alpha = 0.7) +
geom_line(data = plotdata,
aes(x=NMDS1, y=NMDS2,
group = transect,
colour = TP)) +
scale_colour_manual(values = c('#FF9933', '#3399CC')) +
scale_fill_manual(values = c('#FF9933', '#3399CC')) +
scale_size_area(max_size = 5, guide=FALSE) +
labs(x="NMDS1", y="NMDS2") +
theme_bw() +
theme(axis.title.x=element_text(size=10)) +
theme(axis.text.x = element_text(size=9, colour = "black")) +
theme(axis.title.y=element_text(size=10)) +
theme(axis.text.y = element_text(size=9, colour = "black")) +
theme(legend.position="none")
myplot
# Fit TP, basal area and soil data on the species NMDS
fit <- envfit(succ_nmds, plotdata[,c("TP", "age", "AGB")], choice = c(1:2), perm=999, na.rm=T)
fit
# first we need to extract the coordinates of these vectors in the NMDS.
# We will use again the function `score` for this.
env.scrs <- as.data.frame(scores(fit, display = "vectors")) %>%
rownames_to_column("variable") %>%
filter(variable != "age")
TP.scrs  <- as.data.frame(scores(fit, display = "factors")) %>%
rownames_to_column("variable")
myplot +
geom_segment(data = env.scrs,
aes(x = 0, y = 0, xend = 3*NMDS1, yend = 3*NMDS2),
arrow = arrow(length = unit(0.25, "cm")), colour = "black") +
stat_ellipse(data=plotdata,
aes(x=NMDS1, y=NMDS2, colour = TP),
show.legend = F) +
geom_point(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, fill = variable),
pch = 22, colour = "black", size = 4.5, alpha = 0.7) +
geom_text (data=env.scrs,
aes(x= 3*NMDS1, y=.2+3*NMDS2, label=variable), size = 5)+
geom_text(data=TP.scrs,
aes(x=NMDS1, y=NMDS2, label=variable),
hjust=0, vjust=-0.8, size = 5)
temp1 <- succession %>% select(-transect, - census)
temp2 <- succession %>% select(transect, census)
temp3 <- plotdata %>% distinct(transect, census, TP)
succ_dist <- as.matrix((vegdist(temp1, "jaccard")))
adonis(succ_dist ~ TP, temp3)
